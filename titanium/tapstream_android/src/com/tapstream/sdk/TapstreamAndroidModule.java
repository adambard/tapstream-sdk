/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.tapstream.sdk;

import java.lang.reflect.Method;
import java.util.Map;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;

import android.app.Application;

import com.tapstream.sdk.Config;
import com.tapstream.sdk.Event;
import com.tapstream.sdk.Tapstream;

@Kroll.module(name="Tapstream", id="com.tapstream.sdk")
public class TapstreamAndroidModule extends KrollModule
{
	private static final String TAG = "TapstreamAndroidModule";
	private static Application app = null;
	
	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication tiapp)
	{
		app = tiapp;
	}
	
	public TapstreamAndroidModule()
	{
		super();
	}
	
	@Kroll.method
	public void create(String accountName, String developerSecret, KrollDict configVals)
	{
		Config config = new Config();

		if(configVals != null)
		{
			for(Map.Entry<String, Object> item : configVals.entrySet())
			{
				String key = item.getKey();
				Object value = item.getValue();

				if (value == null) {
					Log.e(TAG, "Config object will not accept null values, skipping field named: " + key);
					continue;
				}

				try {
					if (value instanceof String) {
						Method method = lookupMethod(key, String.class);
						if (method != null) {
							method.invoke(config, (String) value);
						}
					} else if (value instanceof Boolean) {
						Method method = lookupMethod(key, boolean.class);
						if (method != null) {
							method.invoke(config, (Boolean) value);
						}
					} else if (value instanceof Integer) {
						Method method = lookupMethod(key, int.class);
						if (method != null) {
							method.invoke(config, (Integer) value);
						}
					} else if (value instanceof Float) {
						Method method = lookupMethod(key, float.class);
						if (method != null) {
							method.invoke(config, (Float) value);
						}
					} else {
						Log.e(TAG, "Config object will not accept type: " + value.getClass().toString());
					}
				} catch (Exception e) {
					Log.e(TAG, "Error setting field on config object (key=" + key + "). " + e.getMessage());
				}
			}
		}

		Tapstream.create(app, accountName, developerSecret, config);
	}

	@Kroll.method
	public void create(String accountName, String developerSecret)
	{
		create(accountName, developerSecret, null);
	}
	
	@Kroll.method
	public void fireEvent(String eventName, boolean oneTimeOnly, KrollDict params)
	{
		Event e = new Event(eventName, oneTimeOnly);
		if(params != null) {
			for(Map.Entry<String, Object> item : params.entrySet())
			{
				e.addPair(item.getKey(), item.getValue());
			}
		}
		Tapstream.getInstance().fireEvent(e);
	}

	@Kroll.method
	public void fireEvent(String eventName, boolean oneTimeOnly)
	{
		fireEvent(eventName, oneTimeOnly, null);
	}
		
	private Method lookupMethod(String propertyName, Class<?> argType) {
		String methodName = propertyName;
		if (methodName.length() > 0) {
			methodName = Character.toUpperCase(methodName.charAt(0)) + methodName.substring(1);
		}
		methodName = "set" + methodName;

		Method method = null;
		try {
			method = Config.class.getMethod(methodName, argType);
		} catch (NoSuchMethodException e) {
			Log.i(TAG, "Ignoring config field named '" + propertyName + "', probably not meant for this platform.");
		} catch (Exception e) {
			Log.e(TAG, "Error getting Config setter method: " + e.getMessage());
		}
		return method;
	}

}

